import numpy as np

grid = [
    [0,3,2,0,0,0,10,11,0,0,0,0,0,0,0,0],
    [0,0,0,0,12,0,0,0,4,10,15,13,0,0,0,0],
    [6,0,0,4,5,0,0,0,0,1,2,8,14,9,0,10],
    [12,13,0,0,6,0,0,0,0,0,0,0,0,2,7,15],
    [3,0,0,16,0,0,14,0,0,0,0,7,10,0,0,0],
    [0,7,0,0,0,11,4,0,6,0,13,1,16,14,0,3],
    [5,0,0,13,0,0,0,0,0,12,0,2,11,0,6,0],
    [0,6,0,14,8,2,0,0,0,4,0,10,13,0,0,0],
    [7,12,0,6,15,16,13,0,3,0,10,0,1,0,0,0],
    [0,0,0,0,0,9,11,3,0,0,0,0,0,0,8,13],
    [11,15,0,0,7,0,1,0,0,0,4,0,0,6,0,0],
    [8,5,0,0,10,6,0,0,0,0,7,0,3,16,0,2],
    [0,0,0,15,1,4,0,0,8,13,6,0,0,0,10,14],
    [0,0,0,11,0,0,0,0,10,0,0,0,0,0,16,7],
    [0,0,3,5,0,12,0,8,2,0,0,4,6,13,0,11],
    [1,8,0,0,0,0,0,0,16,3,0,0,9,12,4,0]
]


def check(y,x,n):
    global grid
    for i in range(0,16):
        if grid[y][i] == n:
            return False
    for i in range(0,16):
        if grid[i][x] == n:
            return False

    x1 = (x//4)*4
    y1 = (y//4)*4

    for i in range(0,4):
        for j in range(0,4):
            if grid[y1+i][x1+j] == n:
                return False
    return True

def solution():
    global grid
    for y in range(16):
        for x in range(16):
            if grid[y][x] == 0:
                for n in range(1,17):
                    if check(y,x,n):
                        grid[y][x] = n
                        solution()
                        grid[y][x] = 0
                return 
    print(np.matrix(grid))


solution()   
#print(check(15,15,2))
